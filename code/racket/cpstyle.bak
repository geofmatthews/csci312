#lang racket

(define fact-tail
  (lambda (n accum)
    (if (zero? n) accum
        (fact-tail (- n 1) (* accum n)))))
(trace fact-tail)
(fact-tail 5 1)

(define fact-nontail
  (lambda (n)
    (if (zero? n) 1
        (* n (fact-nontail (- n 1))))))
(trace fact-nontail)
(fact-nontail 5)

(define fact-cps
  (lambda (n cont)
    (if (zero? n) (cont 1)
        (fact-cps (- n 1) (lambda (result) (cont (* n result)))))))
(trace fact-cps)
;(fact-cps 5 (lambda (n) n))

(define pow
  (lambda (n exp)
    (if (zero? exp) 1
        (* n (pow n (- exp 1))))))
(trace pow)
;(pow 3 5)
(define square (lambda (x) (* x x)))
(define pow-log
  (lambda (n exp)
    (cond ((zero? exp) 1)
          ((even? exp) (square (pow-log n (/ exp 2))))
          (else (* n (pow-log n (- exp 1)))))))
(trace pow-log)
;(pow-log 3 5)
;(pow 3 50)
;(pow-log 3 50)
(define pow-log-cps
  (lambda (n exp cont)
    (cond ((zero? exp) (cont 1))
          ((even? exp) (pow-log-cps n (/ exp 2) (lambda (result) (cont (square result)))))
          (else (pow-log-cps n (- exp 1) (lambda (result) (cont (* n result))))))))
(trace pow-log-cps)
;(pow-log-cps 3 50 (lambda (x) x))
(define fib
  (lambda (n)
    (if (< n 2) 1
        (+ (fib (- n 1)) (fib (- n 2))))))
(trace fib)
(fib 5)
(define fib-cps
  (lambda (n cont)
    (if (< n 2) (cont 1)
        (fib-cps (- n 1)
                 (lambda (result1)
                   (fib-cps (- n 2)
                            (lambda (result2)
                              (cont (+ result1 result2)))))))))
(trace fib-cps)
(fib-cps 5 (lambda (x) x))